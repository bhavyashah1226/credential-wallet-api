// ********RoostGPT********
/*
Test generated by RoostGPT for test credential-wallet-artillery using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Grant authorization\r\n' +
    '    Given an existing account, create another account\r\n' +
    '    When the client sends a POST request to "/authorizations"\r\n' +
    '    Then grant access to your account and confirm access via GET request to "/authorizations"',
  title: 'Grant authorization'
}

*/

// ********RoostGPT********

package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.JSONObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import io.restassured.path.json.JsonPath;

@ExtendWith(SpringExtension.class)
@SpringJUnitConfig
public class scenario_803fe763f5_Test {

    @Test
    public void scenarioTest() throws IOException {
        int noOfRowsToRead = 4;
        for(int currentRow = 1; currentRow <= noOfRowsToRead; currentRow++) {
            String filePath = String.join(System.getProperty("file.separator"), "src", "test", "java", "com", "mycompany", "app", "RoostTest", "scenario-803fe763f5-Test.csv");
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            String line = null;
            int row = 0;
            while ((line = br.readLine()) != null) {
                row++;
                if(row == currentRow) {
                    String[] payloads = line.split("\\^\\|\\^");
                    String method = payloads[0].replaceAll("\"", "");
                    String url = payloads[1].replaceAll("\"", "");
                    JSONObject headers = new JSONObject(payloads[2]);
                    JSONObject requestBody = new JSONObject(payloads[3]);
                    int code = Integer.parseInt(payloads[4].replaceAll("\"", ""));
                    JSONObject responseBody = new JSONObject(payloads[5]);
                    
                    if(method.equalsIgnoreCase("post")) {
                        RestAssured.baseURI = url;
                        RequestSpecification request = RestAssured.given();
                        for(String key : headers.keySet()) {
                            request.header(key, headers.get(key));
                        }
                        request.body(requestBody.toString());
                        Response response = request.post();

                        assert response.statusCode() == code;

                        JsonPath jsonPathEvaluator = response.jsonPath();
                        for(String key : responseBody.keySet()) {
                            assert jsonPathEvaluator.get(key).equals(responseBody.get(key));
                        }
                    }
                    else if(method.equalsIgnoreCase("get")) {
                        RestAssured.baseURI = url;
                        RequestSpecification request = RestAssured.given();
                        for(String key : headers.keySet()) {
                            request.header(key, headers.get(key));
                        }
                        Response response = request.get();

                        assert response.statusCode() == code;

                        JsonPath jsonPathEvaluator = response.jsonPath();
                        for(String key : responseBody.keySet()) {
                            assert jsonPathEvaluator.get(key).equals(responseBody.get(key));
                        }
                    }
                    
                    break;
                }
            }
            br.close();
        }
    }

}
