// ********RoostGPT********
/*
Test generated by RoostGPT for test credential-wallet-artillery using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Delete authorization\r\n' +
    '    Given authorization ID\r\n' +
    '    When the client sends a DELETE request to "/authorizations/ID"\r\n' +
    '    Then the response status code should be 200 for a successful delete\r\n' +
    '    And the authorizations should not appear in GET request for "/authorizations"',
  title: 'Delete authorization'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.response.Response;
import org.testng.annotations.Test;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class scenario_87771cdd6d_Test {

    @Test
    public void deleteAuthorizationTest() {
        try {
            List<String> lines = Files.readAllLines(
                Paths.get("src", "test", "java", "com", "mycompany", "app", "RoostTest", 
                    "scenario-87771cdd6d-Test.csv".split("\\^\\|\\^"))
            );
            String baseUrl = System.getenv("API_HOST");
            for (int i = 1; i < lines.size(); i++) {
                String[] columns = lines.get(i).split("^|^");

                String method = columns[0];
                String url = columns[1];
                Map<String, String> headers = new HashMap<>(Jackson.jsonToObj(columns[2], HashMap.class));
                Map<String, Object> body = Jackson.jsonToObj(columns[3], HashMap.class);
                int expectedStatusCode = Integer.parseInt(columns[4]);
                Map<String, Object> expectedResBody = Jackson.jsonToObj(columns[5], HashMap.class);

                Header header = new Header("Token", headers.get("Token"));

                if (method.equalsIgnoreCase("delete")) {
                    Response response = RestAssured.given().header(header).when().delete(url);
                    assertEquals(response.getStatusCode(), expectedStatusCode);
                  
                    //Assertions for all properties for delete API as per the request
                    expectedResBody.forEach((k, v) -> assertEquals(response.get(k).toString(), v.toString()));
                }
                if (method.equalsIgnoreCase("get")) {
                    Response response = RestAssured.given().header(header).when().get(url);
                    assertEquals(response.getStatusCode(), expectedStatusCode);

                    //Assertions for all properties for get API as per the request
                    expectedResBody.forEach((k, v) -> assertEquals(response.get(k).toString(), v.toString()));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
