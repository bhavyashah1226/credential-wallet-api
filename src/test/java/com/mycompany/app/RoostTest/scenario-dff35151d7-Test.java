// ********RoostGPT********
/*
Test generated by RoostGPT for test credential-wallet-artillery using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.BeforeEach;
import static io.restassured.RestAssured.given;
import io.restassured.response.Response;
import io.restassured.http.ContentType;
import java.io.*;
import java.util.*;

class scenario_dff35151d7_Test {
    String baseUrl = System.getenv("API_HOST");

    @BeforeEach
    void setup() {
        baseUrl = "http://localhost:8080";
    }

    @Test
    void scenario1_Test() throws IOException {
        String dataFile="src"+File.separator+"test"+File.separator+"java"+File.separator+"com"+File.separator+"mycompany"+File.separator+"app"+File.separator+"RoostTest"+File.separator+"scenario-dff35151d7-Test.csv";
        BufferedReader br = new BufferedReader(new FileReader(dataFile));
        String line = br.readLine();
        line = br.readLine(); // Skip header line

        while(line != null){
            if(line.isEmpty()){
                continue;
            }
            String[] data = line.split("\\^\\|\\^");
            String method = data[0];
            String url = data[1];
            Map<String, String> headers = parseHeaders(data[2]);
            String body = data[3];
            int httpResponseCode = Integer.parseInt(data[4]);
            String expectedResponse = data[5];
            if(method.equals("POST")){
                Response response =
                        given().
                                contentType(ContentType.JSON).
                                body(body).
                                headers(headers).
                                when().
                                post(baseUrl + url).
                                then().
                                assertThat().
                                statusCode(httpResponseCode).
                                extract().
                                response();
                assertThat(response.asString(), equalToIgnoringWhiteSpace(expectedResponse));
            } else if(method.equals("GET")){
                Response response =
                        given().
                                headers(headers).
                                when().
                                get(baseUrl + url).
                                then().
                                assertThat().
                                statusCode(httpResponseCode).
                                extract().
                                response();
                assertThat(response.asString(), equalToIgnoringWhiteSpace(expectedResponse));
            }
            line = br.readLine();
        }
        br.close();
    }

    private Map<String, String> parseHeaders(String headers){
        String[] entries = headers.replaceAll("[\\{\\} ]", "").split(",");
        Map<String, String> map = new HashMap<String, String>();
        for(String entry: entries){
            String[] split = entry.split(":");
            map.put(split[0], split[1]);
        }
        return map;
    }
}
