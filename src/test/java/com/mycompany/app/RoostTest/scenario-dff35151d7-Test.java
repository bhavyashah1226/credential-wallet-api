// ********RoostGPT********
/*
Test generated by RoostGPT for test credential-wallet-artillery using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

@RunWith(Parameterized.class)
public class scenario_dff35151d7_Test {
    private static final String BASE_URL = System.getenv("API_HOST");;
    private static final String FILE_PATH = "src\\test\\java\\com\\mycompany\\app\\RoostTest\\scenario-dff35151d7-Test.csv";
    private String method;
    private String url;
    private Map<String, String> headers;
    private String body;
    private int responseCode;
    private Map<String, Object> responseBody;

    public scenario_dff35151d7_Test(String method, String url, Map<String, String> headers, String body, int responseCode, Map<String, Object> responseBody) {
        this.method = method;
        this.url = BASE_URL + url;
        this.headers = headers;
        this.body = body;
        this.responseCode = responseCode;
        this.responseBody = responseBody;
    }

    @Parameterized.Parameters
    public static List<Object[]> data() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));
        reader.readLine();
        String line;
        List<Object[]> data = new ArrayList<>();
        while ((line = reader.readLine()) != null) {
            if (line.trim().isEmpty()) {
                continue;
            }
            String[] parts = line.split("\\^\\|\\^");
            Map<String, String> headers = JsonPath.from(parts[2]).getMap("");
            Map<String, Object> responseBody = JsonPath.from(parts[5]).getMap("");
            data.add(new Object[]{parts[0], parts[1], headers, parts[3], Integer.parseInt(parts[4]), responseBody});
        }
        reader.close();
        return data;
    }

    @Test
    public void test() {
        Response response = given().headers(headers).body(body).when().request(method, url);
        assertThat(response.getStatusCode(), is(responseCode));
        Map<String, Object> actualResponseBody = response.jsonPath().getMap("");
        assertThat(actualResponseBody, is(responseBody));
    }
}
