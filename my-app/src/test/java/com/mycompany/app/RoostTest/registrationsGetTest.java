// ********RoostGPT********
/*
Test generated by RoostGPT for test ZBIO-4912-Rest-Assured-Test using AI Type Open AI and AI Model gpt-4

Test generated for /registrations_get for http method type GET in rest-assured framework

RoostTestHash=6ec067b2e9


*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class registrationsGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/mycompany/app/RoostTest/registrationsGetTest.csv");
    }

  
    @Test  
    public void registrationsGet_Test() {
        this.setUp();
        for (Map<String, String> map : envList) {
          RestAssured.baseURI = map.get("BASE_URL");  
  
                Response response = given()
				.pathParam("size", map.get("size") != null ? map.get("size") : "")
				.pathParam("offset", map.get("offset") != null ? map.get("offset") : "")
				.pathParam("recipient-id", map.get("recipient-id") != null ? map.get("recipient-id") : "")
				.pathParam("credential-url", map.get("credential-url") != null ? map.get("credential-url") : "")
				.header("Token", map.get("API_KEY"))
                .when()
                .get("/registrations")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: successful operation");
      
              if (response.jsonPath().get("total") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("total"), instanceOf(Integer.class));  
          }
      
              if (response.jsonPath().get("registrations") != null) {      
                for (int i = 0; i < response.jsonPath().getList("registrations").size(); i++) {      
              if (response.jsonPath().get("registrations["+ i +"].id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].id"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].reference") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].reference"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("registrations["+ i +"].reference").length(), lessThanOrEqualTo(100));
  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].startDate") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].startDate"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].endDate") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].endDate"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].status"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].credentialUrl") != null) {    
                MatcherAssert.assertThat(response.jsonPath().getString("registrations["+ i +"].credentialUrl"), matchesPattern("^\w+:(\/?\/?)[^\s]+$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].credentialUrl"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].suspendedUntil") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].suspendedUntil"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].issuedAt") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].issuedAt"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].createdAt") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].createdAt"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].updatedAt") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].updatedAt"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].recipient") != null) {      
              if (response.jsonPath().get("registrations["+ i +"].recipient.id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].recipient.id"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].recipient.name") != null) {    
                MatcherAssert.assertThat(response.jsonPath().getString("registrations["+ i +"].recipient.name"), matchesPattern("^[\p{L} .'-]{1,100}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].recipient.name"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("registrations["+ i +"].recipient.type") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("registrations["+ i +"].recipient.type"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("registrations["+ i +"].recipient.type"), anyOf(equalTo("branch"), equalTo("person"), equalTo("employee")));
  
          }
  
          }
      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("registrations"), instanceOf(List.class));
  
          }
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad Request");
      
              if (response.jsonPath().get("error") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("description") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("error") != null) {    
                MatcherAssert.assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("description") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("value") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("value"), instanceOf(undefined.class));  
          }
      
              if (response.jsonPath().get("field") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("field"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("schema_field") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Authentication Required");
      
              if (response.jsonPath().get("error") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("description") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("error") != null) {    
                MatcherAssert.assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("description") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("value") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("value"), instanceOf(undefined.class));  
          }
      
              if (response.jsonPath().get("field") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("field"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("schema_field") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));  
          }
				}
  
            }  
    }
}
