// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredIntegration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=87771cdd6d
ROOST_METHOD_SIG_HASH=0a68a12aee

 ########## Scenario ########## 

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Delete authorization\r\n' +
    '    Given authorization ID\r\n' +
    '    When the client sends a DELETE request to "/authorizations/ID"\r\n' +
    '    Then the response status code should be 200 for a successful delete\r\n' +
    '    And the authorizations should not appear in GET request for "/authorizations"',
  title: 'Delete authorization'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.annotations.BeforeEach;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.*;

public class DeleteAuthorizationTest {

    private String baseURI;
    private String filePath;

    @BeforeEach
    public void setup() {
        baseURI = "http://localhost:8080";
        filePath = "src" + FileSystems.getDefault().getSeparator() + "test" + FileSystems.getDefault().getSeparator() + "java" + FileSystems.getDefault().getSeparator() + "com" + FileSystems.getDefault().getSeparator() + "mycompany" + FileSystems.getDefault().getSeparator() + "app" + FileSystems.getDefault().getSeparator() + "RoostTest" + FileSystems.getDefault().getSeparator() + "DeleteAuthorization.csv";
    }

    @Test
    public void testDeleteAuthorization() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) {
                continue;
            }
            String[] payload = line.split("\\^\\|\\^");
            if (payload[0].equals("METHOD")) {
                continue;
            }

            String method = payload[0];
            String url = payload[1];
            Map<String, String> headers = new HashMap<>();
            headers.put("Token", payload[2]);

            if (method.equals("DELETE")) {
                RestAssured
                        .given()
                        .baseUri(baseURI)
                        .headers(headers)
                        .contentType(ContentType.JSON)
                        .when()
                        .delete(url)
                        .then()
                        .assertThat()
                        .statusCode(Integer.parseInt(payload[4]))
                        .body("api-version", equalTo(payload[5]));
            } else if (method.equals("GET")) {
                Response response = RestAssured
                        .given()
                        .baseUri(baseURI)
                        .headers(headers)
                        .contentType(ContentType.JSON)
                        .when()
                        .get(url);

                response
                        .then()
                        .assertThat()
                        .statusCode(Integer.parseInt(payload[4]))
                        .body("api-version", equalTo(payload[5]));

                int total = response.jsonPath().getInt("total");
                assert total == 0;
            }
        }
        reader.close();
    }
}
