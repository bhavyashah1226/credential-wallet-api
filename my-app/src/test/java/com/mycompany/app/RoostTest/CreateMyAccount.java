// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredIntegration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=dff35151d7
ROOST_METHOD_SIG_HASH=3a7061432c

 ########## Scenario ########## 

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class CreateMyAccountTest {

    private String baseUrl;
    private String accountCreationPayload;
    private String accountVerificationPayload;

    @BeforeEach
    public void setUp() throws IOException {
        String payloadFilePath = FileSystems.getDefault().getPath("src", "test", "java", "com", "mycompany", "app", "RoostTest", "CreateMyAccount.csv").toString();
        BufferedReader br = new BufferedReader(new FileReader(payloadFilePath));
        String line;
        int count = 0;
        while ((line = br.readLine()) != null) {
            if (count == 1) {
                accountCreationPayload = line;
            } else if (count == 2) {
                accountVerificationPayload = line;
            }
            count++;
        }
        br.close();
    }

    @Test
    public void testCreateMyAccount() {
        String[] accountCreationData = accountCreationPayload.split("\\^\\|\\^");
        String[] accountVerificationData = accountVerificationPayload.split("\\^\\|\\^");

        baseUrl = "http://localhost:8080";
        RestAssured.baseURI = baseUrl;

        // Account creation
        RequestSpecification request = RestAssured.given();
        request.header("Content-Type", "application/json");
        JSONObject requestParams = new JSONObject();
        requestParams.put("email", accountCreationData[3]);
        request.body(requestParams.toString());
        Response response = request.post(accountCreationData[1]);

        int statusCode = response.getStatusCode();
        assertEquals(accountCreationData[4], String.valueOf(statusCode));
        assertTrue(response.getBody().asString().contains(accountCreationData[5]));

        // Account verification
        request = RestAssured.given();
        request.header("Content-Type", "application/json");
        response = request.get(accountVerificationData[1]);

        statusCode = response.getStatusCode();
        assertEquals(accountVerificationData[4], String.valueOf(statusCode));
        assertTrue(response.getBody().asString().contains(accountVerificationData[5]));
    }
}
