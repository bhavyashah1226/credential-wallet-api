// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredIntegration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=dff35151d7
ROOST_METHOD_SIG_HASH=3a7061432c

 ########## Scenario ########## 

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CreateMyAccountTest {

    private static final String DATA_FILE = "src" + File.separator + "test" + File.separator + "java" + File.separator +
            "com" + File.separator + "mycompany" + File.separator + "app" + File.separator + "RoostTest" + File.separator + "CreateMyAccount.csv";
    private Map<String, Object> data;

    @BeforeEach
    public void setup() throws IOException, ParseException {
        BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE));
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) {
                continue;
            }
            String[] parts = line.split("\\^\\|\\^");
            data = new HashMap<>();
            data.put("METHOD", parts[0]);
            data.put("URL", parts[1]);
            data.put("REQ_HEADERS", new JSONParser().parse(parts[2]));
            data.put("REQ_BODY", new JSONParser().parse(parts[3]));
            data.put("RESPONSE_CODE", Integer.parseInt(parts[4]));
            data.put("RESPONSE_BODY", new JSONParser().parse(parts[5]));
        }
        reader.close();
    }

    @Test
    public void createMyAccountTest() {
        RestAssured.baseURI = "http://localhost:8080";

        // POST request to create account
        String url = (String) data.get("URL");
        JSONObject requestHeaders = (JSONObject) data.get("REQ_HEADERS");
        JSONObject requestBody = (JSONObject) data.get("REQ_BODY");
        int expectedResponseCode = (int) data.get("RESPONSE_CODE");
        JSONObject expectedResponseBody = (JSONObject) data.get("RESPONSE_BODY");

        RequestSpecification request = given();

        requestHeaders.forEach((k, v) -> request.header((String) k, v));
        request.contentType(ContentType.JSON);
        request.body(requestBody.toJSONString());

        Response response = request.post(url);

        // Assert the response
        assertEquals(expectedResponseCode, response.getStatusCode());
        assertEquals(expectedResponseBody.toJSONString(), response.getBody().asString());

        // GET request to verify account creation
        request = given();
        request.header("Token", "example");
        response = request.get("/me");

        // Assert the response
        assertEquals(200, response.getStatusCode());
        assertEquals("example@example.com", response.jsonPath().getString("email"));
    }
}
