// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredIntegration using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=dff35151d7
ROOST_METHOD_SIG_HASH=3a7061432c

 ########## Scenario ########## 

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CreateMyAccountTest {

    private static Map<String, String> headers = new HashMap<>();
    private static String payload;
    private static String url;
    private static int responseCode;
    private static String responseBody;

    @BeforeAll
    public static void setup() throws IOException {
        Path path = FileSystems.getDefault().getPath("src","test","java","com","mycompany","app","RoostTest","CreateMyAccount.csv");
        BufferedReader reader = new BufferedReader(new FileReader(path.toFile()));
        String line = reader.readLine(); // Skip the header line
        while ((line = reader.readLine()) != null) {
            if (!line.trim().isEmpty()) {
                String[] parts = line.split("\\^\\|\\^");
                String method = parts[0];
                url = parts[1];
                headers = parseJson(parts[2]);
                payload = parts[3];
                responseCode = Integer.parseInt(parts[4]);
                responseBody = parts[5];
            }
        }
        reader.close();
    }

    @Test
    public void testCreateAccount() {
        RestAssured.baseURI = url;
        RequestSpecification request = RestAssured.given().headers(headers);
        Response response = request.body(payload).post();
        assertEquals(responseCode, response.getStatusCode());
        assertEquals(responseBody, response.getBody().asString());
    }

    @Test
    public void testGetAccount() {
        RestAssured.baseURI = url;
        RequestSpecification request = RestAssured.given().headers(headers);
        Response response = request.get();
        assertEquals(responseCode, response.getStatusCode());
        assertEquals(responseBody, response.getBody().asString());
    }

    private static Map<String, String> parseJson(String json) {
        Map<String, String> map = new HashMap<>();
        json = json.substring(1, json.length() - 1); // Remove curly brackets
        String[] keyValuePairs = json.split(",");
        for (String pair : keyValuePairs) {
            String[] entry = pair.split(":");
            map.put(entry[0].trim().replace("\"", ""), entry[1].trim().replace("\"", ""));
        }
        return map;
    }
}
